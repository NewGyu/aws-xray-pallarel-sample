/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package newgyu.xray;

import static newgyu.xray.SomeProcesses.callExternalApi1;
import static newgyu.xray.SomeProcesses.callExternalApi2;
import static newgyu.xray.SomeProcesses.proceedSomething;

import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ForkJoinPool;

import com.amazonaws.xray.AWSXRay;
import com.amazonaws.xray.contexts.SegmentContextExecutors;

public class App {
    public static void main(String[] args) throws InterruptedException {
        try {
            doSomethingSynchronously();
            doSomethingAsync();
            doSomethingAsyncWithOwnSegmentContextExecutor();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public static void doSomethingSynchronously() {
        AWSXRay.beginSegment("sync-process");
        try {
            var res1 = callExternalApi1();
            var res2 = callExternalApi2();
            proceedSomething(res1, res2);
        } finally {
            AWSXRay.endSegment();
        }
    }

    public static void doSomethingAsync() {
        AWSXRay.beginSegment("async-process");
        try {
            var future1 = CompletableFuture.supplyAsync(SomeProcesses::callExternalApi1,
                    SegmentContextExecutors.newSegmentContextExecutor());
            var future2 = CompletableFuture.supplyAsync(SomeProcesses::callExternalApi2,
                    SegmentContextExecutors.newSegmentContextExecutor());

            CompletableFuture.allOf(future1, future2).thenAccept(nothing -> {
                SomeProcesses.proceedSomething(future1.join(), future2.join());
            }).join();
        } finally {
            AWSXRay.endSegment();
        }
    }

    public static void doSomethingAsyncWithOwnSegmentContextExecutor() {
        AWSXRay.beginSegment("async-process-myexecutor");
        try {
            var future1 = CompletableFuture.supplyAsync(SomeProcesses::callExternalApi1,
                    XraySegmentContextExecutors.newExecutor(ForkJoinPool.commonPool()));
            var future2 = CompletableFuture.supplyAsync(SomeProcesses::callExternalApi2,
                    XraySegmentContextExecutors.newExecutor(ForkJoinPool.commonPool()));

            CompletableFuture.allOf(future1, future2).thenAccept(nothing -> {
                SomeProcesses.proceedSomething(future1.join(), future2.join());
            }).join();
        } finally {
            AWSXRay.endSegment();
        }
    }
}
